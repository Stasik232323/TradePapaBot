import telebot
import requests
import pandas as pd
import talib

TOKEN = 8132753634:AAFIxoQPcUOpCGaxKl3KYqwA6-EMC7217JQ
bot = telebot.TeleBot(TOKEN)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
SYMBOL = 'EURUSDT'      # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ BTCUSDT, GBPUSDT –∏ —Ç.–¥.
INTERVAL = '1m'
CANDLE_LIMIT = 100

# ==== –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –° BINANCE ====
def get_candles(symbol=SYMBOL, interval=INTERVAL, limit=CANDLE_LIMIT):
    url = 'https://api.binance.com/api/v3/klines'
    params = {'symbol': symbol, 'interval': interval, 'limit': limit}
    response = requests.get(url, params=params)
    data = response.json()
    df = pd.DataFrame(data, columns=[
        'timestamp', 'open', 'high', 'low', 'close', 'volume',
        'close_time', 'quote_asset_volume', 'trades',
        'taker_buy_base', 'taker_buy_quote', 'ignore'
    ])
    df['close'] = df['close'].astype(float)
    return df

# ==== –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê ====
def analyze_market(symbol=SYMBOL):
    df = get_candles(symbol)
    closes = df['close']

    rsi = talib.RSI(closes, timeperiod=14)
    upper, middle, lower = talib.BBANDS(closes, timeperiod=20)

    last_price = closes.iloc[-1]
    last_rsi = rsi.iloc[-1]
    last_upper = upper.iloc[-1]
    last_lower = lower.iloc[-1]

    if last_rsi < 30 and last_price < last_lower:
        signal = "üü¢ –°–∏–≥–Ω–∞–ª: –ö—É–ø–∏—Ç—å (1 –º–∏–Ω—É—Ç–∞)"
    elif last_rsi > 70 and last_price > last_upper:
        signal = "üî¥ –°–∏–≥–Ω–∞–ª: –ü—Ä–æ–¥–∞—Ç—å (1 –º–∏–Ω—É—Ç–∞)"
    else:
        signal = "‚è∏ –°–∏–≥–Ω–∞–ª: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"

    return (
        f"üìä –°–∏–º–≤–æ–ª: {symbol}\n"
        f"–¶–µ–Ω–∞: {last_price:.5f}\n"
        f"RSI: {last_rsi:.2f}\n"
        f"Bollinger Bands:\n"
        f" ‚îú –í–µ—Ä—Ö–Ω—è—è: {last_upper:.5f}\n"
        f" ‚îî –ù–∏–∂–Ω—è—è: {last_lower:.5f}\n"
        f"{signal}"
    )

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ====
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ RSI –∏ Bollinger Bands.")

@bot.message_handler(commands=['analyze'])
def analyze(message):
    signal = analyze_market()
    bot.send_message(message.chat.id, signal)

# ==== –ó–ê–ü–£–°–ö ====
bot.polling()
